<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.List 
    	java.util.Map		
	" 
%>
<% 
  	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();
    
    String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
    String session = "bonitaAPISession_" + connection;
    
    String username = ElementParameterParser.getValue(node, "__USERNAME__");
	String password = ElementParameterParser.getValue(node, "__PASSWORD__");
	String firstName = ElementParameterParser.getValue(node, "__FIRST_NAME__");
	String lastName = ElementParameterParser.getValue(node, "__LAST_NAME__");
	String title = ElementParameterParser.getValue(node, "__TITLE__");
	String jobTitle = ElementParameterParser.getValue(node, "__JOB_TITLE__");
	
	String managerID = ElementParameterParser.getValue(node, "__MANAGER__");
	
	
	String businessDetails = ElementParameterParser.getValue(node, "__BUSINESS_DETAILS__");
	boolean isBusinessDetails = "true".equals(businessDetails);
	
	String addressBusiness = ElementParameterParser.getValue(node, "__ADDRESS_BUSINESS__");
	String cityBusiness  = ElementParameterParser.getValue(node, "__CITY_BUSINESS__");
	String countryBusiness  = ElementParameterParser.getValue(node, "__COUNTRY_BUSINESS__");
	String zipBusiness  = ElementParameterParser.getValue(node, "__ZIP_BUSINESS__");
	String stateBusiness  = ElementParameterParser.getValue(node, "__STATE_BUSINESS__");
	String emailBusiness  = ElementParameterParser.getValue(node, "__EMAIL_BUSINESS__");
	String phoneBusiness  = ElementParameterParser.getValue(node, "__PHONE_BUSINESS__");
	String mobileBusiness  = ElementParameterParser.getValue(node, "__MOBILE_BUSINESS__");
	
	
	
	String privateDetails = ElementParameterParser.getValue(node, "__PRIVATE_DETAILS__");
	boolean isPrivateDetails = "true".equals(privateDetails);
	String addressPrivate = ElementParameterParser.getValue(node, "__ADDRESS_PRIVATE__");
	String cityPrivate = ElementParameterParser.getValue(node, "__CITY_PRIVATE__");
	String countryPrivate = ElementParameterParser.getValue(node, "__COUNTRY_PRIVATE__");
	String zipPrivate = ElementParameterParser.getValue(node, "__ZIP_PRIVATE__");
	String statePrivate = ElementParameterParser.getValue(node, "__STATE_PRIVATE__");
	String emailPrivate = ElementParameterParser.getValue(node, "__EMAIL_PRIVATE__");
	String phonePrivate = ElementParameterParser.getValue(node, "__PHONE_PRIVATE__");
	String mobilePrivate = ElementParameterParser.getValue(node, "__MOBILE_PRIVATE__");
	
	List<Map<String, String>> memberships =
    (List<Map<String,String>>)ElementParameterParser.getObjectValue(
        node,
        "__MEMBERSHIPS__"
    );
	
    String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
	boolean isDieOnError = "true".equals(dieOnError);
    
%>

try {

	org.bonitasoft.engine.session.APISession session_<%=cid%> = (org.bonitasoft.engine.session.APISession)globalMap.get("<%=session%>");
	org.bonitasoft.engine.api.IdentityAPI identityAPI_<%=cid%> = org.bonitasoft.engine.api.TenantAPIAccessor.getIdentityAPI(session_<%=cid%>);


	org.bonitasoft.engine.identity.UserCreator creator_<%=cid%> = new org.bonitasoft.engine.identity.UserCreator(<%=username%>, <%=password%>);
	creator_<%=cid%>.setFirstName(<%=firstName%>)
			.setLastName(<%=lastName%>);
	<%  if (!("").equals(title)) { %>
			
			creator_<%=cid%>.setTitle(<%=title%>);
	<% }
	if (!("").equals(jobTitle)) { %>
			
			creator_<%=cid%>.setJobTitle(<%=jobTitle%>);
	<%  }%>
	
	// if the manager username is set, we look for it in Bonita and set its id.
	<%  if (!("").equals(managerID)) { %>
		try {
			org.bonitasoft.engine.identity.User manager_<%=cid%> = identityAPI_<%=cid%>.getUserByUserName(<%=managerID%>);
			creator_<%=cid%>.setManagerUserId(manager_<%=cid%>.getId());
		}
		catch(Exception e){
			System.err.println("Error: Cannot find the managerId");
			globalMap.put("<%=cid%>_ERROR_MESSAGE", "Cannot find the managerId");
			globalMap.put("<%=cid%>_ERROR_MESSAGE", e.getMessage());
			<%   if (isDieOnError) { %>
				throw e;
			<%  } %>
		}
	<% }%>
			
	<%   if (isBusinessDetails) { %>
	
		org.bonitasoft.engine.identity.ContactDataCreator businessDetailsCreator_<%=cid%> = new org.bonitasoft.engine.identity.ContactDataCreator();
		<%  if (!("").equals(addressBusiness)) { %>
				
				businessDetailsCreator_<%=cid%>.setAddress(<%=addressBusiness%>);
		<% }
		if (!("").equals(cityBusiness)) { %>
				
				businessDetailsCreator_<%=cid%>.setCity(<%=cityBusiness%>);
		<% }
		if (!("").equals(countryBusiness)) { %>
				
				businessDetailsCreator_<%=cid%>.setCountry(<%=countryBusiness%>);
		<% }
		if (!("").equals(zipBusiness)) { %>
				
				businessDetailsCreator_<%=cid%>.setZipCode(<%=zipBusiness%>);
		<% }
		if (!("").equals(stateBusiness)) { %>
				
				businessDetailsCreator_<%=cid%>.setState(<%=stateBusiness%>);
		<% }
		if (!("").equals(emailBusiness)) { %>
				
				businessDetailsCreator_<%=cid%>.setEmail(<%=emailBusiness%>);
		<% }
		if (!("").equals(phoneBusiness)) { %>
				
				businessDetailsCreator_<%=cid%>.setPhoneNumber(<%=phoneBusiness%>);
		<% }
		if (!("").equals(mobileBusiness)) { %>
				
				businessDetailsCreator_<%=cid%>.setMobileNumber(<%=mobileBusiness%>);
		<%  }%>
		creator_<%=cid%>.setProfessionalContactData(businessDetailsCreator_<%=cid%>);
	<%  } %>
	
		<%   if (isPrivateDetails) { %>
	
		org.bonitasoft.engine.identity.ContactDataCreator privateDetailsCreator_<%=cid%> = new org.bonitasoft.engine.identity.ContactDataCreator();
		<%  if (!("").equals(addressPrivate)) { %>
				
				privateDetailsCreator_<%=cid%>.setAddress(<%=addressPrivate%>);
		<% }
		if (!("").equals(cityPrivate)) { %>
				
				privateDetailsCreator_<%=cid%>.setCity(<%=cityPrivate%>);
		<% }
		if (!("").equals(countryPrivate)) { %>
				
				privateDetailsCreator_<%=cid%>.setCountry(<%=countryPrivate%>);
		<% }
		if (!("").equals(zipPrivate)) { %>
				
				privateDetailsCreator_<%=cid%>.setZipCode(<%=zipPrivate%>);
		<% }
		if (!("").equals(statePrivate)) { %>
				
				privateDetailsCreator_<%=cid%>.setState(<%=statePrivate%>);
		<% }
		if (!("").equals(emailPrivate)) { %>
				
				privateDetailsCreator_<%=cid%>.setEmail(<%=emailPrivate%>);
		<% }
		if (!("").equals(phonePrivate)) { %>
				
				privateDetailsCreator_<%=cid%>.setPhoneNumber(<%=phonePrivate%>);
		<% }
		if (!("").equals(mobilePrivate)) { %>
				
				privateDetailsCreator_<%=cid%>.setMobileNumber(<%=mobilePrivate%>);
		<%  }%>
		creator_<%=cid%>.setPersonalContactData(privateDetailsCreator_<%=cid%>);	
	<%  } %>
	
	
			
			
	org.bonitasoft.engine.identity.User user_<%=cid%> = identityAPI_<%=cid%>.createUser(creator_<%=cid%>);

	// reference the user in the profile User
	org.bonitasoft.engine.api.ProfileAPI orgProfileAPI_<%=cid%> = 	org.bonitasoft.engine.api.TenantAPIAccessor.getProfileAPI(session_<%=cid%>);
	org.bonitasoft.engine.search.SearchOptionsBuilder searchOptionsBuilder_<%=cid%> = new org.bonitasoft.engine.search.SearchOptionsBuilder(0,10);
	searchOptionsBuilder_<%=cid%>.filter(org.bonitasoft.engine.profile.ProfileSearchDescriptor.NAME, "User");
	org.bonitasoft.engine.search.SearchResult<org.bonitasoft.engine.profile.Profile> searchResultProfile_<%=cid%> = orgProfileAPI_<%=cid%>.searchProfiles(searchOptionsBuilder_<%=cid%>.done());
   
	// we should find one result now
	if (searchResultProfile_<%=cid%>.getResult().size() < 1)
        { System.err.println("Should not happen"); }

	// now register the user in the profile
	org.bonitasoft.engine.profile.Profile profile_<%=cid%> = searchResultProfile_<%=cid%>.getResult().get(0);
	org.bonitasoft.engine.profile.ProfileMemberCreator profileMemberCreator_<%=cid%> = new org.bonitasoft.engine.profile.ProfileMemberCreator(profile_<%=cid%>.getId());
	profileMemberCreator_<%=cid%>.setUserId(user_<%=cid%>.getId());
	orgProfileAPI_<%=cid%>.createProfileMember(profileMemberCreator_<%=cid%>);
	
	//here we should add all the memberships
	
	<% 
		 if(memberships != null && memberships.size() > 0) {
		 int m_counter= 0;
		 for(Map<String, String> membership : memberships) {
		 	String group = membership.get("GROUPPATH");
		 	String role = membership.get("ROLENAME");	 	
	%>
		Long group_<%=m_counter%> = identityAPI_<%=cid%>.getGroupByPath(<%=group%>).getId();
		Long role_<%=m_counter%> =  identityAPI_<%=cid%>.getRoleByName(<%=role%>).getId();
		identityAPI_<%=cid%>.addUserMembership(user_<%=cid%>.getId(),group_<%=m_counter%>,role_<%=m_counter%>);
	<%
	m_counter++; } //for end
	} //if end
	
	%>
	
	
} catch (Exception e) {
	System.err.println("Error: user could not be created");
	globalMap.put("<%=cid%>_ERROR_MESSAGE", "Connection could not be established");
	globalMap.put("<%=cid%>_ERROR_MESSAGE", e.getMessage());
<%   if (isDieOnError) { %>
	throw e;
<%  } %>
} 
	